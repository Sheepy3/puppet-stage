[gd_scene load_steps=8 format=3 uid="uid://bswq7q2xsnoyd"]

[ext_resource type="Script" path="res://cursor/Cursor.gd" id="1_moou7"]
[ext_resource type="Texture2D" uid="uid://eyyuwitmxqma" path="res://icon.svg" id="3_bqsb3"]
[ext_resource type="Script" path="res://cursor/CursorVisual.gd" id="4_cn10k"]

[sub_resource type="Shader" id="Shader_o7nun"]
code = "shader_type canvas_item;

uniform float rot_angle = 0.0;
const vec2 pivot = vec2(0.5, 0.5);
uniform float circle_radius = 0.2; // Radius of the circle
uniform float drag = 0.0;
uniform float outline_thickness = 0.01;
uniform vec4 color_input;
void fragment() {
    // Center the UV coordinates
    vec2 uv = UV - pivot;

    // Rotate the UV coordinates
    float sina = sin(rot_angle);
    float cosa = cos(rot_angle);
    mat2 rotation = mat2(
        vec2(cosa, -sina),
        vec2(sina, cosa)
    );
    uv = rotation * uv;

    vec2 ellipse_axes = vec2(drag + (circle_radius*2.0), circle_radius * 2.0); // Semi-major and semi-minor axes

    float alpha = 0.0;
    vec4 color = vec4(0.0, 0.0, 1.0, 0.0); // Default to blue with no alpha

      if (uv.x < 0.0) {
        // Left side: ellipse
        vec2 ellipse_uv = uv / ellipse_axes;
        float ellipse_distance = length(ellipse_uv);

        float adjusted_thickness = outline_thickness / max(ellipse_axes.x, ellipse_axes.y);

        if (abs(ellipse_distance - 0.5) < adjusted_thickness) {
            color = color_input; // Red outline
			color -= vec4(0.0,0.0,0.0,0.4);
        } else if (ellipse_distance < 0.5) {
            color = color_input; // Blue fill
			color -= vec4(0.0,0.0,0.0,0.8);
        } else {
            discard; // Outside the shape
        }
    } else {
        // Right side: circle
        float circle_distance = length(uv);

        if (abs(circle_distance - circle_radius) < outline_thickness) {
            color = color_input; // Red outline
			color -= vec4(0.0,0.0,0.0,0.4);
        } else if (circle_distance < circle_radius) {
            color = color_input; // Blue fill
			color -= vec4(0.0,0.0,0.0,0.8);
        } else {
            discard; // Outside the shape
        }
    }

    // Set the color
    COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_akd2o"]
shader = SubResource("Shader_o7nun")
shader_parameter/rot_angle = 0.0
shader_parameter/circle_radius = 0.14
shader_parameter/drag = 0.0
shader_parameter/outline_thickness = 0.01
shader_parameter/color_input = Vector4(0.1, 0.5, 1, 1)

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_gm3d7"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1

[sub_resource type="CircleShape2D" id="CircleShape2D_80xkh"]

[node name="Cursor" type="Node2D"]
top_level = true
script = ExtResource("1_moou7")

[node name="Sprite2D" type="Sprite2D" parent="."]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_akd2o")
texture = ExtResource("3_bqsb3")
script = ExtResource("4_cn10k")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_gm3d7")

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("CircleShape2D_80xkh")
